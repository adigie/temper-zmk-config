/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define DEFAULT 0
#define NUM 1
#define NAV 2
#define FUN 3
#define BLE 4

&lt { flavor = "balanced"; };

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";

        f_cond {
            if-layers = <1 2>;
            then-layer = <6>;
        };

        bt_cond {
            if-layers = <3 4>;
            then-layer = <7>;
        };
    };

    behaviors {
        lhm: left_homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <400>;
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 30 31 32 33 34 35>;
            hold-trigger-on-release;
            bindings = <&kp>, <&kp>;
        };

        rhm: right_homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <400>;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32>;
            hold-trigger-on-release;
            bindings = <&kp>, <&kp>;
        };

        bspc_del: backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            label = "BACKSPACE_DELETE";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp DELETE>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_RSFT)>;
        };

        super_bspc: super_backspace {
            compatible = "zmk,behavior-mod-morph";
            label = "SUPER_BACKSPACE";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp LC(BACKSPACE)>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        smart_shft: smart_shift {
            compatible = "zmk,behavior-mod-morph";
            label = "SMART_SHIFT";
            #binding-cells = <0>;
            bindings = <&kp LSHFT>, <&caps_word>;

            mods = <(MOD_LSFT)>;
        };

        lt_super_bspc: lt_super_bspc {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_SUPER_BSPC";
            bindings = <&mo>, <&super_bspc>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            quick-tap-ms = <190>;
        };
    };

    combos {
        compatible = "zmk,combos";

        caps_combo {
            bindings = <&caps_word>;
            key-positions = <13 16>;
        };

        ctrl_c {
            bindings = <&kp LC(C)>;
            key-positions = <21 22>;
        };

        ctrl_x {
            bindings = <&kp LC(X)>;
            key-positions = <20 21>;
        };

        ctrl_v {
            bindings = <&kp LC(V)>;
            key-positions = <22 23>;
        };

        lgui {
            bindings = <&kp LGUI>;
            key-positions = <10 19>;
        };
    };

    macros {
        dereference_operator: dereference_operator {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp MINUS &kp GT>;
            label = "DEREFERENCE_OPERATOR";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q        &kp W        &kp E         &kp R         &kp T        &kp Y        &kp U         &kp I               &kp O        &kp P
&lhm LGUI A  &lhm LALT S  &lhm LCTRL D  &lhm LSHFT F  &lhm RALT G  &rhm RALT H  &rhm LSHFT J  &rhm LCTRL K        &rhm LALT L  &rhm LGUI SEMI
&kp Z        &kp X        &kp C         &kp V         &kp B        &kp N        &kp M         &kp COMMA           &kp DOT      &kp FSLH
                          &lt 4 GRAVE   &lt 2 ESC     &lt 5 TAB    &kp RET      &lt 1 SPACE   &lt_super_bspc 3 0
            >;
        };

        num_layer {
            bindings = <
&none         &none         &none          &none          &none         &none         &none          &none          &none         &none
&lhm LGUI N1  &lhm LALT N2  &lhm LCTRL N3  &lhm LSHFT N4  &lhm RALT N5  &rhm RALT N6  &rhm LSHFT N7  &rhm LCTRL N8  &rhm LALT N9  &rhm LGUI N0
&none         &none         &none          &none          &none         &none         &none          &none          &none         &none
                            &trans         &trans         &trans        &trans        &trans         &trans
            >;
        };

        sym_layer {
            bindings = <
&none           &kp MINUS     &kp UNDER        &kp DQT          &kp TILDE        &dereference_operator  &kp RBRC         &kp LBRC          &kp PLUS        &kp EQUAL
&lhm LGUI EXCL  &lhm LALT AT  &lhm LCTRL HASH  &lhm LSHFT DLLR  &lhm RALT PRCNT  &rhm RALT CARET        &rhm LSHFT AMPS  &rhm LCTRL ASTRK  &rhm LALT LPAR  &rhm LGUI RPAR
&kp BSLH        &none         &kp PIPE         &kp SQT          &kp GRAVE        &kp UNDER              &kp RBKT         &kp LBKT          &kp LT          &kp GT
                              &trans           &trans           &trans           &trans                 &trans           &trans
            >;
        };

        nav_layer {
            bindings = <
&none     &none     &none      &none      &none     &kp PSCRN  &kp INSERT  &kp HOME  &kp PG_UP  &kp TAB
&kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &kp RALT  &kp LEFT   &kp DOWN    &kp UP    &kp RIGHT  &none
&none     &none     &none      &none      &none     &none      &kp DEL     &kp END   &kp PG_DN  &kp GRAVE
                    &trans     &trans     &trans    &trans     &trans      &trans
            >;
        };

        media_layer {
            bindings = <
&kp C_BRI_UP          &kp C_MUTE          &kp C_VOLUME_DOWN         &kp C_VOLUME_UP         &kp LA(LC(UP))    &none     &none     &none   &none      &none
&kp C_BRI_DN          &kp C_PREV          &kp C_PLAY_PAUSE          &kp C_NEXT              &kp LA(LC(DOWN))  &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT  &none
&kp LS(LA(LC(DOWN)))  &kp LS(LA(LC(UP)))  &kp LS(LA(LC(LG(DOWN))))  &kp LS(LA(LC(LG(UP))))  &none             &none     &none     &none   &none      &none
                                          &trans                    &trans                  &trans            &trans    &trans    &trans
            >;
        };

        numpad_layer {
            bindings = <
&none  &none  &none   &none   &kp COMMA  &kp FSLH   &kp N7  &kp N8  &kp N9  &kp MINUS
&none  &none  &none   &none   &kp DOT    &kp ASTRK  &kp N4  &kp N5  &kp N6  &kp PLUS
&none  &none  &none   &none   &kp COLON  &kp UNDER  &kp N1  &kp N2  &kp N3  &kp EQUAL
              &trans  &trans  &trans     &kp N0     &trans  &trans
            >;
        };

        f_layer {
            bindings = <
&none         &none         &none          &none          &none         &none         &none          &none          &none         &none
&lhm LGUI F1  &lhm LALT F2  &lhm LCTRL F3  &lhm LSHFT F4  &lhm RALT F5  &rhm RALT F6  &rhm LSHFT F7  &rhm LCTRL F8  &rhm LALT F9  &rhm LGUI F10
&none         &none         &none          &none          &none         &none         &kp F11        &kp F12        &none         &none
                            &none          &none          &none         &none         &none          &none
            >;
        };

        bt_layer {
            bindings = <
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &kp LG(L)              &bt BT_NXT    &bt BT_PRV  &none  &none
&none         &none         &none         &none         &none         &kp LS(LA(LC(LG(S))))  &out OUT_BLE  &none       &none  &none
&none         &none         &none         &none         &none         &kp LS(LA(LC(LG(H))))  &out OUT_USB  &none       &none  &none
                            &none         &none         &bt BT_CLR    &bt BT_CLR_ALL         &none         &none
            >;
        };
    };
};
